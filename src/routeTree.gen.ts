/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DemoRouteRouteImport } from './routes/demo/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoIndexRouteImport } from './routes/demo/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ItinerariesIdRouteImport } from './routes/itineraries/$id'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as AdminTagsRouteImport } from './routes/admin/tags'
import { Route as AdminPlacesRouteImport } from './routes/admin/places'
import { Route as AdminMealTypesRouteImport } from './routes/admin/meal-types'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminItinerariesRouteImport } from './routes/admin/itineraries'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoSentryTestingRouteImport } from './routes/demo/sentry.testing'
import { ServerRoute as ApiTagsServerRouteImport } from './routes/api/tags'
import { ServerRoute as ApiPlacesServerRouteImport } from './routes/api/places'
import { ServerRoute as ApiMealTypesServerRouteImport } from './routes/api/meal-types'
import { ServerRoute as ApiItinerariesServerRouteImport } from './routes/api/itineraries'
import { ServerRoute as ApiDemoNamesServerRouteImport } from './routes/api/demo-names'
import { ServerRoute as ApiPlaceIdServerRouteImport } from './routes/api/place.$id'
import { ServerRoute as ApiItineraryIdServerRouteImport } from './routes/api/itinerary.$id'

const rootServerRouteImport = createServerRootRoute()

const DemoRouteRoute = DemoRouteRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoIndexRoute = DemoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DemoRouteRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ItinerariesIdRoute = ItinerariesIdRouteImport.update({
  id: '/itineraries/$id',
  path: '/itineraries/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/tanstack-query',
  path: '/tanstack-query',
  getParentRoute: () => DemoRouteRoute,
} as any)
const AdminTagsRoute = AdminTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminPlacesRoute = AdminPlacesRouteImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminMealTypesRoute = AdminMealTypesRouteImport.update({
  id: '/meal-types',
  path: '/meal-types',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminItinerariesRoute = AdminItinerariesRouteImport.update({
  id: '/itineraries',
  path: '/itineraries',
  getParentRoute: () => AdminRouteRoute,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/start/server-funcs',
  path: '/start/server-funcs',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/start/api-request',
  path: '/start/api-request',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoSentryTestingRoute = DemoSentryTestingRouteImport.update({
  id: '/sentry/testing',
  path: '/sentry/testing',
  getParentRoute: () => DemoRouteRoute,
} as any)
const ApiTagsServerRoute = ApiTagsServerRouteImport.update({
  id: '/api/tags',
  path: '/api/tags',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPlacesServerRoute = ApiPlacesServerRouteImport.update({
  id: '/api/places',
  path: '/api/places',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMealTypesServerRoute = ApiMealTypesServerRouteImport.update({
  id: '/api/meal-types',
  path: '/api/meal-types',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiItinerariesServerRoute = ApiItinerariesServerRouteImport.update({
  id: '/api/itineraries',
  path: '/api/itineraries',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiDemoNamesServerRoute = ApiDemoNamesServerRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPlaceIdServerRoute = ApiPlaceIdServerRouteImport.update({
  id: '/api/place/$id',
  path: '/api/place/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiItineraryIdServerRoute = ApiItineraryIdServerRouteImport.update({
  id: '/api/itinerary/$id',
  path: '/api/itinerary/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/demo': typeof DemoRouteRouteWithChildren
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
  '/admin/': typeof AdminIndexRoute
  '/demo/': typeof DemoIndexRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
  '/admin': typeof AdminIndexRoute
  '/demo': typeof DemoIndexRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/demo': typeof DemoRouteRouteWithChildren
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
  '/admin/': typeof AdminIndexRoute
  '/demo/': typeof DemoIndexRoute
  '/demo/sentry/testing': typeof DemoSentryTestingRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/demo'
    | '/admin/itineraries'
    | '/admin/login'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/demo/tanstack-query'
    | '/itineraries/$id'
    | '/admin/'
    | '/demo/'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/itineraries'
    | '/admin/login'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/demo/tanstack-query'
    | '/itineraries/$id'
    | '/admin'
    | '/demo'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/demo'
    | '/admin/itineraries'
    | '/admin/login'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/demo/tanstack-query'
    | '/itineraries/$id'
    | '/admin/'
    | '/demo/'
    | '/demo/sentry/testing'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  DemoRouteRoute: typeof DemoRouteRouteWithChildren
  ItinerariesIdRoute: typeof ItinerariesIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/itineraries': typeof ApiItinerariesServerRoute
  '/api/meal-types': typeof ApiMealTypesServerRoute
  '/api/places': typeof ApiPlacesServerRoute
  '/api/tags': typeof ApiTagsServerRoute
  '/api/itinerary/$id': typeof ApiItineraryIdServerRoute
  '/api/place/$id': typeof ApiPlaceIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/itineraries': typeof ApiItinerariesServerRoute
  '/api/meal-types': typeof ApiMealTypesServerRoute
  '/api/places': typeof ApiPlacesServerRoute
  '/api/tags': typeof ApiTagsServerRoute
  '/api/itinerary/$id': typeof ApiItineraryIdServerRoute
  '/api/place/$id': typeof ApiPlaceIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/itineraries': typeof ApiItinerariesServerRoute
  '/api/meal-types': typeof ApiMealTypesServerRoute
  '/api/places': typeof ApiPlacesServerRoute
  '/api/tags': typeof ApiTagsServerRoute
  '/api/itinerary/$id': typeof ApiItineraryIdServerRoute
  '/api/place/$id': typeof ApiPlaceIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/demo-names'
    | '/api/itineraries'
    | '/api/meal-types'
    | '/api/places'
    | '/api/tags'
    | '/api/itinerary/$id'
    | '/api/place/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/demo-names'
    | '/api/itineraries'
    | '/api/meal-types'
    | '/api/places'
    | '/api/tags'
    | '/api/itinerary/$id'
    | '/api/place/$id'
  id:
    | '__root__'
    | '/api/demo-names'
    | '/api/itineraries'
    | '/api/meal-types'
    | '/api/places'
    | '/api/tags'
    | '/api/itinerary/$id'
    | '/api/place/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiDemoNamesServerRoute: typeof ApiDemoNamesServerRoute
  ApiItinerariesServerRoute: typeof ApiItinerariesServerRoute
  ApiMealTypesServerRoute: typeof ApiMealTypesServerRoute
  ApiPlacesServerRoute: typeof ApiPlacesServerRoute
  ApiTagsServerRoute: typeof ApiTagsServerRoute
  ApiItineraryIdServerRoute: typeof ApiItineraryIdServerRoute
  ApiPlaceIdServerRoute: typeof ApiPlaceIdServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/': {
      id: '/demo/'
      path: '/'
      fullPath: '/demo/'
      preLoaderRoute: typeof DemoIndexRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/itineraries/$id': {
      id: '/itineraries/$id'
      path: '/itineraries/$id'
      fullPath: '/itineraries/$id'
      preLoaderRoute: typeof ItinerariesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/admin/tags': {
      id: '/admin/tags'
      path: '/tags'
      fullPath: '/admin/tags'
      preLoaderRoute: typeof AdminTagsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/places': {
      id: '/admin/places'
      path: '/places'
      fullPath: '/admin/places'
      preLoaderRoute: typeof AdminPlacesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/meal-types': {
      id: '/admin/meal-types'
      path: '/meal-types'
      fullPath: '/admin/meal-types'
      preLoaderRoute: typeof AdminMealTypesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/itineraries': {
      id: '/admin/itineraries'
      path: '/itineraries'
      fullPath: '/admin/itineraries'
      preLoaderRoute: typeof AdminItinerariesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/sentry/testing': {
      id: '/demo/sentry/testing'
      path: '/sentry/testing'
      fullPath: '/demo/sentry/testing'
      preLoaderRoute: typeof DemoSentryTestingRouteImport
      parentRoute: typeof DemoRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/tags': {
      id: '/api/tags'
      path: '/api/tags'
      fullPath: '/api/tags'
      preLoaderRoute: typeof ApiTagsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/places': {
      id: '/api/places'
      path: '/api/places'
      fullPath: '/api/places'
      preLoaderRoute: typeof ApiPlacesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/meal-types': {
      id: '/api/meal-types'
      path: '/api/meal-types'
      fullPath: '/api/meal-types'
      preLoaderRoute: typeof ApiMealTypesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/itineraries': {
      id: '/api/itineraries'
      path: '/api/itineraries'
      fullPath: '/api/itineraries'
      preLoaderRoute: typeof ApiItinerariesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/place/$id': {
      id: '/api/place/$id'
      path: '/api/place/$id'
      fullPath: '/api/place/$id'
      preLoaderRoute: typeof ApiPlaceIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/itinerary/$id': {
      id: '/api/itinerary/$id'
      path: '/api/itinerary/$id'
      fullPath: '/api/itinerary/$id'
      preLoaderRoute: typeof ApiItineraryIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminRouteRouteChildren {
  AdminItinerariesRoute: typeof AdminItinerariesRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminMealTypesRoute: typeof AdminMealTypesRoute
  AdminPlacesRoute: typeof AdminPlacesRoute
  AdminTagsRoute: typeof AdminTagsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminItinerariesRoute: AdminItinerariesRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminMealTypesRoute: AdminMealTypesRoute,
  AdminPlacesRoute: AdminPlacesRoute,
  AdminTagsRoute: AdminTagsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface DemoRouteRouteChildren {
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoIndexRoute: typeof DemoIndexRoute
  DemoSentryTestingRoute: typeof DemoSentryTestingRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const DemoRouteRouteChildren: DemoRouteRouteChildren = {
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoIndexRoute: DemoIndexRoute,
  DemoSentryTestingRoute: DemoSentryTestingRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

const DemoRouteRouteWithChildren = DemoRouteRoute._addFileChildren(
  DemoRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  DemoRouteRoute: DemoRouteRouteWithChildren,
  ItinerariesIdRoute: ItinerariesIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiDemoNamesServerRoute: ApiDemoNamesServerRoute,
  ApiItinerariesServerRoute: ApiItinerariesServerRoute,
  ApiMealTypesServerRoute: ApiMealTypesServerRoute,
  ApiPlacesServerRoute: ApiPlacesServerRoute,
  ApiTagsServerRoute: ApiTagsServerRoute,
  ApiItineraryIdServerRoute: ApiItineraryIdServerRoute,
  ApiPlaceIdServerRoute: ApiPlaceIdServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
