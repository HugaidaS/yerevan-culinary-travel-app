/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ItinerariesIdRouteImport } from './routes/itineraries/$id'
import { Route as AdminTagsRouteImport } from './routes/admin/tags'
import { Route as AdminPlacesRouteImport } from './routes/admin/places'
import { Route as AdminMealTypesRouteImport } from './routes/admin/meal-types'
import { Route as AdminItinerariesRouteImport } from './routes/admin/itineraries'
import { ServerRoute as ApiPdfServerRouteImport } from './routes/api/pdf'

const rootServerRouteImport = createServerRootRoute()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItinerariesIdRoute = ItinerariesIdRouteImport.update({
  id: '/itineraries/$id',
  path: '/itineraries/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTagsRoute = AdminTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminPlacesRoute = AdminPlacesRouteImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminMealTypesRoute = AdminMealTypesRouteImport.update({
  id: '/meal-types',
  path: '/meal-types',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminItinerariesRoute = AdminItinerariesRouteImport.update({
  id: '/itineraries',
  path: '/itineraries',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ApiPdfServerRoute = ApiPdfServerRouteImport.update({
  id: '/api/pdf',
  path: '/api/pdf',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/itineraries': typeof AdminItinerariesRoute
  '/admin/meal-types': typeof AdminMealTypesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/itineraries/$id': typeof ItinerariesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/itineraries'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/itineraries/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/itineraries'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/itineraries/$id'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/itineraries'
    | '/admin/meal-types'
    | '/admin/places'
    | '/admin/tags'
    | '/itineraries/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  ItinerariesIdRoute: typeof ItinerariesIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/pdf': typeof ApiPdfServerRoute
}
export interface FileServerRoutesByTo {
  '/api/pdf': typeof ApiPdfServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/pdf': typeof ApiPdfServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/pdf'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/pdf'
  id: '__root__' | '/api/pdf'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPdfServerRoute: typeof ApiPdfServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/itineraries/$id': {
      id: '/itineraries/$id'
      path: '/itineraries/$id'
      fullPath: '/itineraries/$id'
      preLoaderRoute: typeof ItinerariesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/tags': {
      id: '/admin/tags'
      path: '/tags'
      fullPath: '/admin/tags'
      preLoaderRoute: typeof AdminTagsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/places': {
      id: '/admin/places'
      path: '/places'
      fullPath: '/admin/places'
      preLoaderRoute: typeof AdminPlacesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/meal-types': {
      id: '/admin/meal-types'
      path: '/meal-types'
      fullPath: '/admin/meal-types'
      preLoaderRoute: typeof AdminMealTypesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/itineraries': {
      id: '/admin/itineraries'
      path: '/itineraries'
      fullPath: '/admin/itineraries'
      preLoaderRoute: typeof AdminItinerariesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/pdf': {
      id: '/api/pdf'
      path: '/api/pdf'
      fullPath: '/api/pdf'
      preLoaderRoute: typeof ApiPdfServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminRouteRouteChildren {
  AdminItinerariesRoute: typeof AdminItinerariesRoute
  AdminMealTypesRoute: typeof AdminMealTypesRoute
  AdminPlacesRoute: typeof AdminPlacesRoute
  AdminTagsRoute: typeof AdminTagsRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminItinerariesRoute: AdminItinerariesRoute,
  AdminMealTypesRoute: AdminMealTypesRoute,
  AdminPlacesRoute: AdminPlacesRoute,
  AdminTagsRoute: AdminTagsRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  ItinerariesIdRoute: ItinerariesIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPdfServerRoute: ApiPdfServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
